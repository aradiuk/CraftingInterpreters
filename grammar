program        → declaration* EOF ;

declaration    → funDecl |
                 varDecl |
                 statement;

funDecl        → "fun" function;
function       → IDENTIFIER "(" parameters? ")" block;
parameters     → IDENTIFIED ( "," IDENTIFIER )* ;


varDecl        → "var" IDENTIFIER ("=" expression)? ";";

statement      → exprStmt  |
                 forStmt   |
                 ifStmt    |
                 printStmt |
                 whileStmt |
                 block ;

returnStmt     → "return" expression? ";";

forStmt        → "for" "(" (varDecl | exprStmt | ";" )
                 expression? ";"
                 expression? ")" statement;

whileStmt      → "while" "(" expression ")" statement;

breakStmt      → "break";

ifStmt         → "if" "(" expression ")" statement
                 ( "else" statement )? ;

block          → "{" declaration* "}" ;

exprStmt       → expression ";" ;
printStmt      → "print" expression ";" ;

arguments      → expression ("," expression )*;

expression     → assignment;
assignment     → IDENTIFIER "=" assignment | logic_or ;

logic_or       → logic_and ( "or" logic_and )* ;
logic_and      → comma ( "or" comma )* ;

comma          → equality ( "," equality )*;
equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           → factor ( ( "-" | "+" ) factor )* ;
factor         → unary ( ( "/" | "*" ) unary )* ;
unary          → ( "!" | "-" ) unary
               | primary ;
call           → primary ( "(" arguments? ")" )* ;
primary        → NUMBER | STRING | "true" | "false" | "nil"
               | "(" expression ")" | IDENTIFIER
				// Error productions
			   | ( "!=" | "==" ) equality
               | ( ">" | ">=" | "<" | "<=" ) comparison
               | ( "+" ) term
               | ( "/" | "*" ) factor
